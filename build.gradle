plugins {
	id 'fabric-loom' version '0.9-SNAPSHOT'
	id 'maven-publish'
	id "com.modrinth.minotaur" version "1.2.1"
}

sourceCompatibility = JavaVersion.VERSION_16
targetCompatibility = JavaVersion.VERSION_16

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

repositories {
	// Add repositories to retrieve artifacts from in here.
	// You should only use this when depending on other mods because
	// Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
	// See https://docs.gradle.org/current/userguide/declaring_repositories.html
	// for more information about repositories.
	maven { url "https://maven.shedaniel.me/" }
	maven { url "https://maven.terraformersmc.com/releases/"}
}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	// PSA: Some older mods, compiled on Loom 0.2.1, might have outdated Maven POMs.
	// You may need to force-disable transitiveness on them.

	// github api for java
	implementation 'org.kohsuke:github-api:1.132'

	// cloth config api
	modApi("me.shedaniel.cloth:cloth-config-fabric:5.0.38") {
		exclude(group: "net.fabricmc.fabric-api")
	}

	// mod menu
	modImplementation "com.terraformersmc:modmenu:2.0.10"
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	// ensure that the encoding is set to UTF-8, no matter what the system default is
	// this fixes some edge cases with special characters not displaying correctly
	// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
	// If Javadoc is generated, this must be specified in that task too.
	it.options.encoding = "UTF-8"

	// Minecraft 1.17 (21w19a) upwards uses Java 16.
	it.options.release = 16
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}"}
	}
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			// add all the jars that should be included when publishing to maven
			artifact(remapJar) {
				builtBy remapJar
			}
			artifact(sourcesJar) {
				builtBy remapSourcesJar
			}
		}
	}
}

/* import com.modrinth.minotaur.TaskModrinthUpload

task publishModrinth (type: TaskModrinthUpload) {
	BufferedReader br = new BufferedReader(new InputStreamReader(System.in))
	System.out.println("Enter a Modrinth Access Token: ")
	token = br.readLine() // Get the modrinth Access Token you got from the basics part of this tutorial.
	projectId = "9WRBI0vY" // Enter your modrinth mod ID here.
	System.out.println("Enter the version number:")
	versionNumber = br.readLine()
	System.out.println("Enter the version name:")
	versionName = br.readLine()
	uploadFile = remapJar // This links to a task that builds your mod jar and sets "uploadFile" to the mod jar.
	System.out.println("Enter the game version number: (See minotaur docs for valids)")
	addGameVersion(br.readLine())
	System.out.println("Enter changelog:")
	changelog = br.readLine()
	addLoader("fabric")
} */
